# This is where resized images and converted videos will be stored.
gallery.resizeDir=C:/temp/resize

# Defines whether user-defined images sizes should be allowed per request. If
# false, only specific image formats are allowed.
gallery.allowCustomImageSizes=false

# Properties file with user, group and password info for Spring security.
# Format of property is spring, where file system needs to be prefixed by
# 'file:' .
# The format within this property file should be standard Spring Security
# format. Key is the username, first part of the value is the password, then
# comes a list of roles, and then an enabled flag, like this:
# user1=user1-password,ROLE_USER,ROLE_USER1,ROLE_PUBLIC,enabled
# public=public-password,ROLE_USER,ROLE_PUBLIC,enabled
gallery.users.propertiesFile=file:C:/temp/gallery-users.properties

# This should point to the properties file that defines the authorization
# mapping between user groups and directories.
# NOTE: The file below is reloaded during runtime if any changes are made.
# This means that directories can be changed on the fly as long as the role
# already exists. 
# The format should be as per the following:
# ROLE_USER1.main=C:/temp/directory1
# ROLE_USER1.second=C:/temp/directory2
# ROLE_PUBLIC.public=C:/temp/public
gallery.groupDirAuth.properties=C:/temp/gallery-auth-mapping.properties

# This should point to the binary used for video conversion, for instance
# avconv or ffmpeg. Either just the name or the full path can be entered,
# depending on the environment.
gallery.videoConversion.binary=C:/temp/ffmpeg/bin/ffmpeg.exe
#gallery.videoConversion.binary=avconv

# Template for the external execution of the compact video format
# String 1 will be the executable.
# String 2 will be the input file.
# String 3 will be the output file. 
#This property has been tested successfully with ffmpeg
gallery.videoConversion.mode.compact=%s,-v,quiet,-i,%s,%s
#The below config has been tested successfully with avconv
#gallery.videoConversion.mode.compact=%s,-i,%s,-strict,experimental,%s

# Template for the external execution of generating a screenshot from a video.
# String 1 will be the executable.
# String 2 will be the input file (video).
# String 3 will be the output file (image).
# String 4 will be the width of the image.
# String 5 will be the height of the image.
gallery.videoConversion.imageCommandTemplate=%1$s,-i,%2$s,-ss,00:00:00.500,-filter:v,scale="%4$s:%5$s",-vframes,1,%3$s

# States how long time in seconds the gallery app will wait for an external
# program to convert one video before aborting the conversion of that video.
gallery.videoConversion.maxWaitTimeSeconds=3600

# Optional. If set, any video conversion call will redirect the error output
# from the external process to the file specified.
gallery.videoConversion.externalProcessErrorLogFile=

gallery.imageResizing.maxImageWidth=5000
gallery.imageResizing.maxImageHeight=5000

# This is only needed if ImageResizeServiceIMImpl is used for resizing
#gallery.imageMagickPath=C:/Program Files/ImageMagick-6.9.3-Q16


